package wtf.nebula.client.impl.module.exploits;

import com.google.common.collect.Lists;
import me.bush.eventbus.annotation.EventListener;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S29PacketSoundEffect;
import wtf.nebula.client.api.property.Property;
import wtf.nebula.client.impl.event.base.Era;
import wtf.nebula.client.impl.event.impl.client.EventTick;
import wtf.nebula.client.impl.event.impl.network.EventPacket;
import wtf.nebula.client.impl.event.impl.world.EventWorldChange;
import wtf.nebula.client.impl.module.ModuleCategory;
import wtf.nebula.client.impl.module.ToggleableModule;
import wtf.nebula.client.utils.client.Timer;

import java.util.List;

public class Portal extends ToggleableModule {
    private static final List<String> PORTAL_SOUND_IDS = Lists.newArrayList("portal.portal", "portal.travel", "portal.trigger");

    private final Property<Boolean> chat = new Property<>(true, "Chat");
    private final Property<Boolean> sounds = new Property<>(false, "Sounds", "sfx");

    private final Property<Boolean> fastEnter = new Property<>(false, "Fast Enter", "fastenter");
    private final Property<Boolean> autoDisable = new Property<>(true, "Auto Disable", "autodisable")
            .setVisibility(fastEnter::getValue);

    private final Timer timer = new Timer();

    public Portal() {
        super("Portal", new String[]{"portal", "portaltweaks"}, ModuleCategory.EXPLOITS);
        offerProperties(chat, sounds, fastEnter, autoDisable);
    }

    @EventListener
    public void onTick(EventTick event) {
        if (mc.thePlayer.inPortal && fastEnter.getValue()) {

            if (mc.thePlayer.ticksExisted > 120 && timer.hasPassed(5000L, false)) {

                timer.resetTime();
                for (int i = 0; i < mc.thePlayer.getMaxInPortalTime(); ++i) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer());
                }
            }

        }

        if (chat.getValue()) {

            mc.thePlayer.inPortal = false;
        }
    }

    @EventListener
    public void onWorldChange(EventWorldChange event) {

        if (fastEnter.getValue() && !isNull()) {
            mc.thePlayer.ticksExisted = 0;
            timer.resetTime();

            if (autoDisable.getValue()) {
                fastEnter.setValue(false);
            }
        }
    }

    @EventListener
    public void onPacket(EventPacket event) {
        if (event.getEra().equals(Era.PRE) && event.getPacket() instanceof S29PacketSoundEffect && sounds.getValue()) {
            S29PacketSoundEffect packet = event.getPacket();
            if (PORTAL_SOUND_IDS.contains(packet.func_149212_c().toLowerCase())) {
                event.setCancelled(true);
            }
        }

    }
}

package wtf.nebula.client.impl.module.exploits;

import me.bush.eventbus.annotation.EventListener;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import wtf.nebula.client.api.property.Property;
import wtf.nebula.client.impl.event.base.Era;
import wtf.nebula.client.impl.event.impl.client.EventTick;
import wtf.nebula.client.impl.event.impl.network.EventPacket;
import wtf.nebula.client.impl.module.ModuleCategory;
import wtf.nebula.client.impl.module.ToggleableModule;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class PingSpoof extends ToggleableModule {
    private final Property<Integer> delay = new Property<>(200, 10, 5000, "Delay", "d", "dl");
    private final Property<Boolean> anti = new Property<>(false, "Anti", "zero", "neg");

    private final Map<Long, C00PacketKeepAlive> packets = new ConcurrentHashMap<>();

    public PingSpoof() {
        super("Ping Spoof", new String[]{"pingspoof", "spoofer", "pingspoofer"}, ModuleCategory.EXPLOITS);
        offerProperties(delay, anti);
    }

    @EventListener
    public void onTick(EventTick event) {
        packets.forEach((time, pk) -> {
            if (System.currentTimeMillis() - time >= delay.getValue()) {
                mc.thePlayer.sendQueue.addToSendQueueSilent(pk);
                packets.remove(time);
            }
        });
    }

    @EventListener
    public void onPacket(EventPacket event) {
        if (event.getEra().equals(Era.PRE)) {
            if (event.getPacket() instanceof C00PacketKeepAlive) {

                if (anti.getValue()) {
                    ((C00PacketKeepAlive) event.getPacket()).field_149461_a = Integer.MIN_VALUE;
                } else {
                    event.setCancelled(true);
                    packets.put(System.currentTimeMillis(), event.getPacket());
                }
            }
        }
    }
}

package wtf.nebula.client.impl.module.exploits;

import me.bush.eventbus.annotation.EventListener;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import wtf.nebula.client.api.property.Property;
import wtf.nebula.client.impl.event.impl.client.EventTick;
import wtf.nebula.client.impl.module.ModuleCategory;
import wtf.nebula.client.impl.module.ToggleableModule;
import wtf.nebula.client.utils.player.PlayerUtils;

public class FastBow extends ToggleableModule {
    private final Property<Boolean> autoRelease = new Property<>(true, "Auto Release", "autorelease", "autorel");
    private final Property<Integer> ticks = new Property<>(3, 3, 20, "Ticks", "t");

    private boolean again = true;

    public FastBow() {
        super("Fast Bow", new String[]{"fastbow", "autobow"}, ModuleCategory.EXPLOITS);
        offerProperties(autoRelease, ticks);
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        again = true;
    }

    @EventListener
    public void onTick(EventTick event) {
        ItemStack activeStack = mc.thePlayer.getItemInUse();
        if (activeStack != null && activeStack.getItem() instanceof ItemBow) {
            int count = Math.min(mc.thePlayer.getItemInUseDuration(), 20);
            if (count >= ticks.getValue() && again) {
                int loops = 20 - count;
                for (int i = 0; i < loops; ++i) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer());
                    mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(-1, -1, -1, 255, activeStack, 0.0F, 0.0F, 0.0F));
                }

                if (autoRelease.getValue()) {
                    PlayerUtils.stopUseCurrentItem();
                }

                again = false;
            }

        } else {
            again = true;
        }
    }
}

package wtf.nebula.client.impl.module.exploits;

import io.netty.util.internal.ConcurrentSet;
import me.bush.eventbus.annotation.EventListener;
import me.bush.eventbus.annotation.ListenerPriority;
import net.minecraft.block.Block;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.culling.Frustrum;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.server.S21PacketChunkData;
import net.minecraft.network.play.server.S23PacketBlockChange;
import net.minecraft.world.chunk.Chunk;
import wtf.nebula.client.api.property.Property;
import wtf.nebula.client.impl.event.base.Era;
import wtf.nebula.client.impl.event.impl.network.EventPacket;
import wtf.nebula.client.impl.event.impl.render.EventRender3D;
import wtf.nebula.client.impl.module.ModuleCategory;
import wtf.nebula.client.impl.module.ToggleableModule;
import wtf.nebula.client.impl.module.active.Colors;
import wtf.nebula.client.utils.client.MathUtils;
import wtf.nebula.client.utils.player.RotationUtils;
import wtf.nebula.client.utils.render.RenderEngine;

import java.util.Set;

import static org.lwjgl.opengl.GL11.*;

public class NewChunks extends ToggleableModule {
    private final Set<Chunk> chunks = new ConcurrentSet<>();
    // private final Frustrum frustrum = new Frustrum();

    private final Property<Mode> mode = new Property<>(Mode.PACKET, "Mode", "m", "type");
    private final Property<Integer> yLevel = new Property<>(0, -1, 256, "YLevel", "ypos");

    public NewChunks() {
        super("New Chunks", new String[]{"newchunks"}, ModuleCategory.EXPLOITS);
        offerProperties(mode, yLevel);
    }

    @Override
    public String getTag() {
        return String.valueOf(chunks.size());
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        chunks.clear();
    }

    @EventListener(priority = ListenerPriority.HIGHEST)
    public void onRenderWorld(EventRender3D event) {
        if (mc.renderViewEntity == null) {
            return;
        }

        // fuck my render stack shit
        glPushMatrix();
        glEnable(GL_BLEND);
        OpenGlHelper.glBlendFunc(770, 771, 0, 1);
        glDisable(GL_TEXTURE_2D);
        glDisable(GL_DEPTH_TEST);

        glEnable(GL_LINE_SMOOTH);
        glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);
        glLineWidth(1.5f);

        glTranslated(-RenderManager.renderPosX, -RenderManager.renderPosY, -RenderManager.renderPosZ);

        RenderEngine.color(Colors.getClientColor());

        for (Chunk chunk : chunks) {
//            frustrum.setPosition(
//                    MathUtils.interpolate(mc.renderViewEntity.posX, mc.renderViewEntity.lastTickPosX, event.getPartialTicks()),
//                    MathUtils.interpolate(mc.renderViewEntity.posY, mc.renderViewEntity.lastTickPosY, event.getPartialTicks()),
//                    MathUtils.interpolate(mc.renderViewEntity.posZ, mc.renderViewEntity.lastTickPosZ, event.getPartialTicks())
//            );

            int y = yLevel.getValue();

            //if (frustrum.isBoxInFrustum(chunk.xPosition, y, chunk.zPosition, chunk.xPosition + 16, y, chunk.zPosition + 16)) {
                glBegin(GL_LINE_LOOP);
                {
                    glVertex3i(chunk.xPosition * 16, y, chunk.zPosition * 16);
                    glVertex3i(chunk.xPosition * 16 + 16, y, chunk.zPosition * 16);
                    glVertex3i(chunk.xPosition * 16 + 16, y, chunk.zPosition * 16 + 16);
                    glVertex3i(chunk.xPosition * 16, y, chunk.zPosition * 16 + 16);
                }
                glEnd();
            //}
        }

        glLineWidth(1.0f);
        glDisable(GL_LINE_SMOOTH);
        glEnable(GL_DEPTH_TEST);
        glEnable(GL_TEXTURE_2D);
        glDisable(GL_BLEND);
        glPopMatrix();
    }

    @EventListener
    public void onPacket(EventPacket event) {

        if (event.getEra().equals(Era.PRE)) {

            if (mode.getValue().equals(Mode.PACKET)) {

                if (event.getPacket() instanceof S21PacketChunkData) {
                    S21PacketChunkData packet = event.getPacket();
                    if (!packet.isFullChunk) {
                        Chunk chunk = mc.theWorld.getChunkFromChunkCoords(packet.x, packet.z);
                        if (chunk != null) {
                            chunks.add(chunk);
                        }
                    }
                }
            } else if (mode.getValue().equals(Mode.UPDATES)) {

                if (event.getPacket() instanceof S23PacketBlockChange) {
                    S23PacketBlockChange packet = event.getPacket();

                    Block changedBlock = packet.func_148880_c();
                    if (changedBlock.equals(Blocks.water) || changedBlock.equals(Blocks.lava)) {

                        Chunk chunk = mc.theWorld.getChunkFromBlockCoords(packet.func_148879_d(), packet.func_148877_f());
                        if (chunk != null) {
                            chunks.add(chunk);
                        }
                    }
                }
            }
        }
    }

    public enum Mode {
        PACKET, UPDATES
    }
}

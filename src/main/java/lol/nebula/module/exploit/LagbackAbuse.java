package lol.nebula.module.exploit;

import lol.nebula.listener.bus.Listener;
import lol.nebula.listener.events.net.EventPacket;
import lol.nebula.module.Module;
import lol.nebula.module.ModuleCategory;
import lol.nebula.setting.Setting;
import lol.nebula.util.math.timing.Timer;
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

/**
 * @author aesthetical
 * @since 06/03/23
 */
public class LagbackAbuse extends Module {
    private final Setting<Double> delay = new Setting<>(0.5, 0.01, 0.0, 10.0, "Delay");
    private final Setting<Double> maxDistance = new Setting<>(1.0, 0.01, 0.1, 8.0, "Max Distance");

    private final Timer timer = new Timer();

    public LagbackAbuse() {
        super("Lagback Abuse",
                "Cancels S08s if they are close enough to your client position",
                ModuleCategory.EXPLOIT);
    }

    @Listener
    public void onPacketInbound(EventPacket.Inbound event) {
        if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 10) return;

        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            S08PacketPlayerPosLook packet = event.getPacket();

            if (!timer.ms((long) (delay.getValue() * 1000.0), false)) return;

            print("Processing lagback");

            double distance = mc.thePlayer.getDistance(packet.func_148932_c(),
                    packet.func_148928_d(),
                    packet.func_148933_e());

            if (distance <= maxDistance.getValue()) {
                event.cancel();

                print("Accepted lagback silently");

                // silently accept lagback
                mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C06PacketPlayerPosLook(
                        mc.thePlayer.posX,
                        mc.thePlayer.boundingBox.minY,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        mc.thePlayer.rotationYaw,
                        mc.thePlayer.rotationPitch,
                        false));
            }
        }
    }
}
